<?php

require_once(dirname(__FILE__) . '/AbstractTestCase.php');


/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-22 at 09:11:24.
 */
abstract class Webformat_PHPUnit_Framework_TestCase_AbstractMagentoTestCase extends Webformat_PHPUnit_Framework_TestCase_AbstractTestCase {
    protected function setUp() {
        $rv = parent::setUp();
        $this->setStoreId($GLOBALS['store_id']);
        return $rv;
    }

    /**
     * Generate random test case.
     * @param int $count How many customers?
     * @return Mage_Customer_Model_Customer[] Random customers
     */
    public function generateRandomCustomers($count) {
        /* @var $rv Mage_Customer_Model_Customer[] */
        $rv = array();
        foreach (range(0, $count - 1) as $i) {
            $rv[$i] = $this->generateRandomCustomer();
        }
        return $rv;
    }

    /**
     * Generate random customer.
     * @return Mage_Customer_Model_Customer Random customer
     */
    public function generateRandomCustomer() {
        /* @var $customer Mage_Customer_Model_Customer */
        $customer = Mage::getModel('customer/customer');
        $customer->setFirstname($this->randomFirstName());
        $customer->setLastname($this->randomLastName());
        $customer->setPassword('123456');
        $customer->setStore(Mage::getModel('core/store')->load($this->getStoreId()));

        /* @var $address Mage_Customer_Model_Address */
        $address = Mage::getModel('customer/address');
        $address->setRegionId($this->randomRegion());
        $address->setCountryId($this->randomCountry());
        $address->setPostcode($this->randomPostcode());
        $address->setTelephone($this->randomTelephone());
        $address->setCity($this->randomCity());
        $address->setStreet($this->randomStreet());
        $address->setFirstname($customer->getFirstname());
        $address->setLastname($customer->getLastname());
        $customer->addAddress($address);
        $customer->setEmail($this->mkMail($customer->getFirstname(), $customer->getLastname()));
        $customer->save();
        $address->save();

        /* @var $helper Contactlab_Subscribers_Helper_Uk */
        $helper = Mage::helper("contactlab_subscribers/uk");
        $helper->update($customer->getEntityId(), NULL);
        return $customer;
    }

    public function randomFirstName() {
        return $this->random("Mario", "Dario", "Lara", "Giulia", "Luisa", "Tania", "Marco", "Andrea", "Diego", "Gianluca", "Michele", "Ernesto", "Davide", "Carlo", "Carla", "Gianni", "Gianna", "Francesco", "Francesca");
    }

    public function randomLastName() {
        return $this->random("Rossi", "Verdi", "Pasquali", "Peresson", "De Francesco", "Lorenzon", "Pinto", "De Luigi", "Bersani", "Speranza", "Girondi", "Fatrane", "Allegri", "Dello", "De Preti", "Mieli", "Paulate", "Verri", "Siniscalco");
    }

    public function randomStreet() {
        return $this->random("Viale Verdi", "Via Roma", "Via Udine", "Viale Montecristo", "Vicolo Corto", "Vicolo stretto");
    }

    public function randomNr() {
        return $this->random("1", "7", "12", "14/c", "19", "52", "44", "7/b", "20", "20/a", "25", "34", "35/b", "17");
    }

    public function randomCity() {
        return $this->random("Pero", "Romano", "Desenzano", "Merano", "Villanova");
    }

    public function randomCountry() {
        return $this->random("IT");
    }

    public function randomRegion() {
        return $this->random("UD", "PN", "TS", "FI", "RM", "TO");
    }

    public function randomPostcode() {
        return mt_rand(12345, 99999);
    }

    public function randomTelephone() {
        return mt_rand(4012345, 4999999);
    }

    public function random() {
        $a = func_get_args();
        return $a[mt_rand(0, func_num_args() - 1)];
    }

    public function mkMail($n, $l) {
        return "andrea.gaspardo+cl_" . preg_replace('|\s+|', '_', strtolower($n . "." . $l . '.' . mt_rand(100000000, 999999999) . '_' . mt_rand(100000000, 999999999) . '@webformat.com'));
    }

    /**
     * Get test customers
     * @return Mage_Customer_Model_Customer[]
     */
    public function getTestCustomers() {
        /* @var $customers Mage_Customer_Model_Customer[] */
        $customers = Mage::getResourceModel("customer/customer_collection")
                ->addFieldToFilter('email', array('like' => 'andrea.gaspardo+cl_%'));
        $customers->getSelect()->order('entity_id');
        return $customers;
    }

    /**
     * Remove test customers.
     */
    public function removeTestCustomers() {
        /* @var $customers Mage_Customer_Model_Customer[] */
        $customers = $this->getTestCustomers();
        foreach ($customers as $customer) {
            $subscriber = Mage::getModel('newsletter/subscriber');
            $subscriber->loadByCustomer($customer)->delete();
            $customer->delete();
        }
    }

    /**
     * Subscribe.
     * @param Mage_Customer_Model_Customer[] $customers
     */
    public function subscribeCustomers(array $customers) {
        foreach ($customers as $customer) {
            $this->subscribeCustomer($customer);
        }
    }

    /**
     * Subscribe.
     * @param Mage_Customer_Model_Customer $customer
     */
    public function subscribeCustomer(Mage_Customer_Model_Customer $customer) {
        /* @var $subscriber Mage_Newsletter_Model_Subscriber */
        $subscriber = Mage::getModel('newsletter/subscriber');
        $subscriber->loadByCustomer($customer);
        $subscriber->setSubscriberStatus(Mage_Newsletter_Model_Subscriber::STATUS_SUBSCRIBED);
        $subscriber->setSubscriberEmail($customer->getEmail());
        $subscriber->setCustomerId($customer->getEntityId());
        $subscriber->save();

        /* @var $helper Contactlab_Subscribers_Helper_Uk */
        $helper = Mage::helper("contactlab_subscribers/uk");
        $helper->update($customer->getEntityId(), $subscriber->getSubscriberId());
    }

    /**
     * Get wishlist.
     * @param Mage_Customer_Model_Customer $customer
     * @return Mage_Wishlist_Model_Wishlist
     */
    private function getWishlistForCustomer(Mage_Customer_Model_Customer $customer) {
        /* @var $wishlist Mage_Wishlist_Model_Wishlist */
        $wishlist = Mage::getModel('wishlist/wishlist');
        $wishlist->loadByCustomer($customer, true);
        $wishlist->save();
        return $wishlist;
    }

    /**
     * Generate wishlist with no items.
     * @param Mage_Customer_Model_Customer $customer
     * @return Mage_Wishlist_Model_Wishlist
     */
    public function generateVoidWishlist(Mage_Customer_Model_Customer $customer) {
        return $this->getWishlistForCustomer($customer);
    }

    /**
     * 
     * @param Mage_Customer_Model_Customer $customer
     * @return Mage_Wishlist_Model_Wishlist
     */
    public function generateOldWishlist(Mage_Customer_Model_Customer $customer) {
        /* @var $wishlist Mage_Wishlist_Model_Wishlist */
        $wishlist = $this->generateYoungWishlist($customer);
        $this->updateWishlistUpdatedAt($wishlist, -100);
        return $wishlist;
    }

    /**
     * 
     * @param Mage_Customer_Model_Customer $customer
     * @return Mage_Wishlist_Model_Wishlist
     */
    public function generateWishlist(Mage_Customer_Model_Customer $customer) {
        /* @var $wishlist Mage_Wishlist_Model_Wishlist */
        $wishlist = $this->generateYoungWishlist($customer);
        $this->updateWishlistUpdatedAt($wishlist, -2);
        return $wishlist;
    }

    /**
     * 
     * @param Mage_Customer_Model_Customer $customer
     * @return Mage_Wishlist_Model_Wishlist
     */
    public function generateYoungWishlist(Mage_Customer_Model_Customer $customer) {
        /* @var $wishlist Mage_Wishlist_Model_Wishlist */
        $wishlist = $this->getWishlistForCustomer($customer);
        $wishlist->setStoreId($customer->getStoreId());
        $this->addProductsToWishlist($wishlist);
        $wishlist->save();

        return $wishlist;
    }

    /**
     * Is subscribed?
     * @param Mage_Customer_Model_Customer $customer
     */
    public function isSubscribed(Mage_Customer_Model_Customer $customer) {
        /* @var $c Mage_Customer_Model_Customer */
        $c = Mage::getModel('customer/customer')->load($customer->getEntityId());

        /* @var $subscriber Mage_Newsletter_Model_Subscriber */
        $subscriber = Mage::getModel('newsletter/subscriber');
        $subscriber->loadByCustomer($c);
        return $subscriber->isSubscribed();
    }

    /**
     * Has uk?
     * @param Mage_Customer_Model_Customer $customer
     */
    public function hasUk(Mage_Customer_Model_Customer $customer) {
        /* @var $subscriber Mage_Newsletter_Model_Subscriber */
        $subscriber = Mage::getModel('newsletter/subscriber');
        $subscriber->loadByCustomer($customer);

        /* @var $uks Contactlab_Subscribers_Model_Uk[] */
        $uks = Mage::getResourceModel('contactlab_subscribers/uk_collection');
        $uks->addFieldToFilter('customer_id', $customer->getEntityId());
        $uks->addFieldToFilter('subscriber_id', $subscriber->getSubscriberId());

        return $uks->count() === 1;
    }

    /**
     * Get test products.
     * @return Mage_Catalog_Model_Product[]
     */
    public function getProducts() {
        /* @var $collection Mage_Catalog_Model_Resource_Product_Collection */
        $collection = Mage::getResourceModel("catalog/product_collection");
        $collection->setStoreId($this->getStoreId());

        $collection->addAttributeToFilter('status', array('in' => Mage_Catalog_Model_Product_Status::STATUS_ENABLED));
        $collection->addAttributeToFilter('has_options', 0);

        $collection->addAttributeToSelect('name');
        $collection->addAttributeToSelect('price');

        $collection->setVisibility(array(
            Mage_Catalog_Model_Product_Visibility::VISIBILITY_IN_CATALOG,
            Mage_Catalog_Model_Product_Visibility::VISIBILITY_BOTH));

        $collection->getSelect()->limit(3);

        // $this->log($collection->getSelect()->assemble());

        return $collection;
    }

    /**
     * Add products to wishlist.
     * @param Mage_Wishlist_Model_Wishlist $wishlist
     */
    public function addProductsToWishlist(Mage_Wishlist_Model_Wishlist $wishlist) {
        $buyRequest = new Varien_Object();
        $buyRequest->setStoreId($wishlist->getStoreId());
        foreach ($this->getProducts() as $product) {
            $wishlist->addNewItem($product->getEntityId(), $buyRequest);
        }
    }

    /**
     * Log.
     * @param string $value
     */
    public static function log($value) {
        Mage::log($value, null, "unit-test.log", true);
    }

    /**
     * Update wishlist.
     * @param Mage_Wishlist_Model_Wishlist $wishlist
     * @param int $days
     */
    public function updateWishlistUpdatedAt(Mage_Wishlist_Model_Wishlist $wishlist, $days) {
        $resource = Mage::getSingleton('core/resource');
        $writeConnection = $resource->getConnection('core_write');
        $wishlistTable = $resource->getTableName('wishlist/wishlist');
        $query = "UPDATE $wishlistTable SET updated_at = adddate(now(), $days) WHERE wishlist_id = "
                . (int) $wishlist->getWishlistId();
        // self::log($query);
        $writeConnection->query($query);
    }

    /**
     * Get cart.
     * @param Mage_Customer_Model_Customer $customer
     * @return Mage_Sales_Model_Quote
     */
    private function getCartForCustomer(Mage_Customer_Model_Customer $customer) {
        /* @var $cart Mage_Sales_Model_Quote */
        $cart = Mage::getModel('sales/quote');
        $cart->loadByCustomer($customer);
        $cart->assignCustomer($customer);
        $cart->save();
        $this->assertNotNull($cart, "Cart shouldn't be null");
        $this->assertNotNull($cart->getEntityId(), "Cart ID shouldn't be null");
        return $cart;
    }

    /**
     * Generate cart with no items.
     * @param Mage_Customer_Model_Customer $customer
     * @return Mage_Sales_Model_Quote
     */
    public function generateVoidCart(Mage_Customer_Model_Customer $customer) {
        return $this->getCartForCustomer($customer);
    }

    /**
     * 
     * @param Mage_Customer_Model_Customer $customer
     * @return Mage_Sales_Model_Quote
     */
    public function generateOldCart(Mage_Customer_Model_Customer $customer) {
        /* @var $cart Mage_Sales_Model_Quote */
        $cart = $this->generateYoungCart($customer);
        $this->updateCartUpdatedAt($cart, -100);
        return $cart;
    }

    /**
     * 
     * @param Mage_Customer_Model_Customer $customer
     * @return Mage_Sales_Model_Quote
     */
    public function generateCart(Mage_Customer_Model_Customer $customer) {
        /* @var $cart Mage_Sales_Model_Quote */
        $cart = $this->generateYoungCart($customer);
        $this->updateCartUpdatedAt($cart, -2);
        return $cart;
    }

    /**
     * 
     * @param Mage_Customer_Model_Customer $customer
     * @return Mage_Sales_Model_Quote
     */
    public function generateYoungCart(Mage_Customer_Model_Customer $customer) {
        /* @var $cart Mage_Sales_Model_Quote */
        $cart = $this->getCartForCustomer($customer);
        $cart->setStoreId($customer->getStoreId());
        $this->addProductsToCart($cart);
        $cart->save();

        return $cart;
    }

    /**
     * Add products to cart.
     * @param Mage_Sales_Model_Quote $cart
     */
    public function addProductsToCart(Mage_Sales_Model_Quote $cart) {
        $buyRequest = new Varien_Object();
        $buyRequest->setStoreId($cart->getStoreId())->setQty(5);
        $counter = 0;
        foreach ($this->getProducts() as $product) {
            /* @var $stockItem Mage_CatalogInventory_Model_Stock_Item */
            $stockItem = Mage::getModel('cataloginventory/stock_item');
            $stockItem->assignProduct($product);
            $item = $cart->addProduct($product, $buyRequest);
            $this->assertInstanceOf('Mage_Sales_Model_Quote_Item', $item, "Cannot add item to cart");
            $item->setStoreId($cart->getStoreId())->setProduct($product);
            $this->assertGreaterThan(0, $product->getPrice(), "Product price should be greater than zero!");
            $this->assertEquals($cart->getStoreId(), $product->getStoreId(), "Product StoreId should be " . $cart->getStoreId() . "!");
            $item->setPrice($product->getPrice())->calcRowTotal()->save();

            $this->assertGreaterThan(0, $item->getRowTotal(), "Row total should be greater than zero!");
            $this->assertEquals(5, $item->getQty(), "Row qty should be 5!");
            $this->assertInstanceOf("Mage_Sales_Model_Quote_Item", $item, "Item should be instance of Mage_Sales_Model_Quote_Item");
            $this->assertNotNull($item->getId(), "Item should have an id");
            $counter++;
        }
        $cart->setTotalsCollectedFlag(false)->collectTotals()->save();
        $this->assertGreaterThan(0, $cart->getGrandTotal(), "Cart total should be greater than zero");
        $this->assertGreaterThan(0, $counter, "Some products should have been added to cart");
    }

    /**
     * Update cart.
     * @param Mage_Sales_Model_Quote $cart
     * @param int $days
     */
    public function updateCartUpdatedAt(Mage_Sales_Model_Quote $cart, $days) {
        $resource = Mage::getSingleton('core/resource');
        $writeConnection = $resource->getConnection('core_write');
        $wishlistTable = $resource->getTableName('sales/quote');
        $query = "UPDATE $wishlistTable SET updated_at = adddate(now(), $days) WHERE entity_id = "
                . (int) $cart->getEntityId();
        // self::log($query);
        $writeConnection->query($query);
    }

    /**
     * Set store id.
     * @param string $storeId
     */
    public function setStoreId($storeId) {
        $this->storeId = $storeId;
    }

    /**
     * Get store id.
     * @return string
     */
    public function getStoreId() {
        return $this->storeId;
    }
}
