<?php

require_once(dirname(__FILE__) . '/../../../../../../../../Webformat/PHPUnit/Framework/AbstractMagentoTestCase.php');

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-22 at 09:11:24.
 */
abstract class Contactlab_Template_Model_Newsletter_Processor_AbstractTest extends Webformat_PHPUnit_Framework_TestCase_AbstractMagentoTestCase {

    /**
     * @var Contactlab_Template_Model_Newsletter_Processor_Wishlist
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->log("setUp");
        parent::setUp();
        $this->assertGreaterThan(0, $this->getStoreId(), "Store id should be greater than 0");
    }

    /**
     * @medium
     * Test customers
     */
    public function testCustomers() {
        $this->log("testCustomers");
        if ($this->getTestCustomers()->count() === 0) {
            $customers = $this->generateRandomCustomers(5);
            $this->assertCount(5, $customers, "There should be 5 customers");
            $this->doTestGeneratedCustomers($customers);
            return $customers;
        } else if ($this->getTestCustomers()->count() === 5) {
            /* @var $customersCollection Mage_Customer_Model_Resource_Customer_Collection */
            $customersCollection = $this->getTestCustomers();
            $this->assertEquals(5, $customersCollection->count(), "Collection customers test should be 5");
            $customers = $customersCollection->getItems();
            $customersValues = array_values($customers);
            $this->doTestGeneratedCustomers($customersValues);

            return $customersValues;
        }
        return false;
    }

        /**
     * Test subscription
     * @medium
     * @param Mage_Customer_Model_Customer[] $customers Customers
     * @depends testCustomers
     */
    public function testSubscription(array $customers) {
        $this->log("testSubscription");
        $this->doTestGeneratedCustomers($customers);

        foreach (range(0, 3) as $i) {
            $this->subscribeCustomer($customers[$i]);
            $this->assertTrue($this->isSubscribed($customers[$i]), "Subscriber nr $i should be subscribed");
            $this->assertTrue($this->hasUk($customers[$i]), "Subscriber nr $i should have a UK record");
        }
        $this->assertFalse($this->isSubscribed($customers[4]), "Subscriber nr $i shouldn't be subscribed");
        $this->assertFalse($this->hasUk($customers[4]), "Subscriber nr $i shouldn't have a UK record");

        return $customers;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        // $this->log("tearDown");
    }

    /**
     * Log.
     * @param string $value
     */
    public static function log($value) {
        Mage::log($value, null, "unit-test.log", true);
    }

        /**
     * 
     * @param Mage_Customer_Model_Customer[] $customers
     */
    public function doTestGeneratedCustomers(array $customers) {
        $this->assertCount(5, $customers, "There should be 5 test customers");
        foreach (range(0, 4) as $i) {
            $this->assertInstanceOf('Mage_Customer_Model_Customer', $customers[$i], "Customer item $i should be instance of Mage_Customer_Model_Customer, not " . get_class($customers[$i]));
            $this->assertNotNull($customers[0]->getEntityId(), "Entity id of customer $i should be not null");
            $this->assertNotNull($customers[0]->getEmail(), "Entity email of customer $i should be not null");
            $this->assertEquals($this->getStoreId(), $customers[0]->getStoreId(), "Store Id of customer $i should be " . $this->getStoreId());
        }
    }

    /**
     * Do test filter.
     * @param Mage_Customer_Model_Customer[] $customers
     * @param string $name
     */
    public function doTestFilters(array $customers, $name) {
        $this->log("testFilters");
        $templateTypes = Mage::getResourceModel("contactlab_template/type_collection")
                ->addFieldToFilter('template_type_code', $name);
        $templateTypes->getSelect()->limit(1);
        $this->assertCount(1, $templateTypes, "There should be only one $name template type");

        /* @var $templateTypes Contactlab_Template_Model_Type[] */
        foreach ($templateTypes as $type) {
            $this->assertEquals($name, $type->getTemplateTypeCode(), "Template type should be $name");
            
            /* @var $templates Contactlab_Template_Model_Newsletter_Template[] */
            $templates = Mage::getResourceModel("newsletter/template_collection")
                    ->addFieldToFilter('template_type_id', $type->getEntityId());
            $templates->getSelect()->limit(1);
            $this->assertCount(1, $templates,  "There should be almost one template with $name type");
            foreach ($templates as $template) {
                $this->doTestTemplate($template);
                /* @var $subsribers Mage_Newsletter_Model_Subscriber[] */
                $this->object->addFilter('contactlab_template/newsletter_processor_filter_emailLike',
                            array('like' => 'andrea.gaspardo+cl_%'));
                $subscribers = $this->object->loadSubscribers($template);
                $this->assertEquals(1, $subscribers->count(),
                            "Customer extracted to be sent " . strtolower($name) . " email should be one");
            }
        }
    }

    /**
     * Do test templates.
     * @param Mage_Newsletter_Model_Template[] $templates
     * @param string $name
     */
    public function doTestTemplate($template) {
        $this->assertNotNull($template->getTemplateId(), "Template type id should be not null");
        $this->assertInstanceOf('Mage_Newsletter_Model_Template', $template,
                "Template should be instance of Mage_Newsletter_Model_Template");

        $this->assertNotNull($template->getMinMinutesFromLastUpdate(), "Specify min minutes in template!");
        $this->assertNotNull($template->getMaxMinutesFromLastUpdate(), "Specify max minutes in template!");

        $this->assertGreaterThan(0, $template->getMinMinutesFromLastUpdate(), "Min minutes should be 10");
        $this->assertLessThan(50, $template->getMinMinutesFromLastUpdate(), "Min minutes should be 10");
        $this->assertGreaterThanOrEqual(3000, $template->getMaxMinutesFromLastUpdate(), "Min minutes should be 3000");
        $this->assertLessThanOrEqual(4000, $template->getMaxMinutesFromLastUpdate(), "Min minutes should be 3000");
    }
}
